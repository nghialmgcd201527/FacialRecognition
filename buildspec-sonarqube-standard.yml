version: 0.2

env:
  secrets-manager:
    NODE_ENV: $AWS_SECRET_ARN:NODE_ENV
    SONAR_URL: $AWS_SECRET_ARN:SONAR_URL
    SONAR_TOKEN: $AWS_SECRET_ARN:SONAR_TOKEN
    SONAR_PROJECT_KEY: $AWS_SECRET_ARN:SONAR_PROJECT_API_KEY_PURAVIDA
phases:
  install:
    runtime-versions:
      nodejs: 18
    commands:
      # Copy odc reports
      - echo $CODEBUILD_SRC_DIR_sastout_api_service
      - |
        if ! [ -z ${CODEBUILD_SRC_DIR_sastout_api_service+x} ] ; then
          cp -R $CODEBUILD_SRC_DIR_sastout_api_service/odc-reports $CODEBUILD_SRC_DIR
        fi
  build:
    commands:
      - cd $CODEBUILD_SRC_DIR
      - |
        docker run \
        --rm \
        -e SONAR_HOST_URL="${SONAR_URL}" \
        -e SONAR_SCANNER_OPTS="-Dsonar.projectKey=${SONAR_PROJECT_KEY} -Dsonar.sources=. -Dsonar.exclusions=odc-reports/** -Dsonar.dependencyCheck.htmlReportPath=odc-reports/dependency-check-report.html" \
        -e SONAR_TOKEN=${SONAR_TOKEN} \
        -v "$(pwd):/usr/src" \
        sonarsource/sonar-scanner-cli
      - echo "build stage completed"

# version: 0.2

# env:
#   # parameter-store:
#   #   TOOLING_ACCOUNT_ID: /op/$STAGE/AWS_ACCOUNT_ID
#   #   AWS_ACCOUNT_ID: /op/$STAGE/AWS_ACCOUNT_ID
#   secrets-manager:
#     NODE_ENV: $AWS_SECRET_ARN:NODE_ENV
#     # CROSS_ACCOUNT_ROLE: $AWS_SECRET_ARN:CROSS_ACCOUNT_ROLE
#     SONAR_PROJECT_KEY: $AWS_SECRET_ARN:SONAR_PROJECT_API_KEY_PURAVIDA
#     SONAR_URL: $AWS_SECRET_ARN:SONAR_URL
#     SONAR_TOKEN: $AWS_SECRET_ARN:SONAR_TOKEN_API_PURAVIDA
# phases:
#   install:
#     runtime-versions:
#       nodejs: latest
#     commands:
#       #Install OWASP Dependency-Check
#       - wget https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-4.4.0.2170-linux.zip
#       - unzip sonar-scanner-cli-4.4.0.2170-linux.zip
#       - mv sonar-scanner-4.4.0.2170-linux /opt/sonar-scanner
#       - chmod -R 775 /opt/sonar-scanner
#       - echo "stage pre_build completed"
#   build:
#     commands:
#       # - cd $CODEBUILD_SRC_DIR_sastout_accountservice
#       - cd $CODEBUILD_SRC_DIR
#       - /opt/sonar-scanner/bin/sonar-scanner -D"sonar.projectKey=${SONAR_PROJECT_KEY}" -D"sonar.sources=." -D"sonar.host.url=${SONAR_URL}" -D"sonar.token=${SONAR_TOKEN}" -D"sonar.dependencyCheck.htmlReportPath=$CODEBUILD_SRC_DIR_sastout_apiservice/odc-reports/dependency-check-report.html"  > sonarqube_scanreport.json
#       - echo "build stage completed"
  # post_build:
  #   commands:
  #     - sonar_link=$(cat sonarqube_scanreport.json | egrep -o "you can browse http://[^, ]+")
  #     - sonar_task_id=$(cat sonarqube_scanreport.json | egrep -o "task\?id=[^ ]+" | cut -d'=' -f2)
  #     # Allow time for SonarQube background task to complete
  #     - |
  #       stat="PENDING";
  #       while [ "$stat" != "SUCCESS" ]; do
  #         if [ $stat = "FAILED" ] || [ $stat = "CANCELLED" ]; then
  #           echo "SonarQube task $sonar_task_id failed";
  #           exit 1;
  #         fi
  #         stat=$(curl -u $SonarQube_Access_Token $SonarQube_URL/api/ce/task\?id=$sonar_task_id | jq -r '.task.status');
  #         sleep 5;
  #       done
  #     - sonar_analysis_id=$(curl -u $SonarQube_Access_Token $SonarQube_URL/api/ce/task\?id=$sonar_task_id | jq -r '.task.analysisId')
  #     - quality_status=$(curl -u $SonarQube_Access_Token $SonarQube_URL/api/qualitygates/project_status\?analysisId=$sonar_analysis_id | jq -r '.projectStatus.status')
  #     - SCAN_RESULT=$(curl -o sonarqube_scanreport.json -u $SonarQube_Access_Token $SonarQube_URL/api/issues/search?createdAfter=2020-10-21&componentKeys=devsecops&severities=CRITICAL,BLOCKER&languages=php&types=VULNERABILITY&onComponentOnly=true)
  #     - |
  #       jq "{ \"messageType\": \"CodeScanReport\", \"reportType\": \"SONAR-QUBE\", \
  #       \"createdAt\": $(date +\"%Y-%m-%dT%H:%M:%S.%3NZ\"), \"source_repository\": env.CODEBUILD_SOURCE_REPO_URL, \
  #       \"source_branch\": env.CODEBUILD_SOURCE_VERSION, \
  #       \"build_id\": env.CODEBUILD_BUILD_ID, \
  #       \"source_commitid\": env.CODEBUILD_RESOLVED_SOURCE_VERSION, \
  #       \"report\": . }" sonarqube_scanreport.json > payload.json
  #     - |
  #       if [ $quality_status = "ERROR" ] || [ $quality_status = "WARN" ]; then
  #         aws lambda invoke --function-name ImportVulToSecurityHub --payload file://payload.json sonarqube_scan_report.json && echo "LAMBDA_SUCCEDED" || echo "LAMBDA_FAILED";
  #         echo "in quality_status ERROR or WARN condition"
  #         exit 1;
  #       elif [ $quality_status = "OK" ]; then
  #         echo "in quality_status OK condition"
  #       else
  #         echo "in quality_status  unexpected condition"
  #         exit 1;
  #       fi
# artifacts:
#   type: zip
#   files: '**/*'
